all = cbind("All",all)
combined_data=rbind(all,combined_data)
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
datafile = paste("SHR_",1977,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(Circumstance,Month))
cir_by_month = cast(cir_by_month,Circumstance~Month)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
all = cbind("All",all)
combined_data=rbind(all,combined_data)
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Circumstance~Month)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
all = cbind("All",all)
combined_data=rbind(all,combined_data)
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
all = cbind("All",all)
combined_data=rbind(all,combined_data)
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
all = cbind("All",all)
combined_data=rbind(all,combined_data[,c(-14,-27)])
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
all = cbind("All",all)
all
head(combined_data)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
all
dim(all)
data.frame(all)
t(data.frame(all))
rbind("All",t(data.frame(all)))
cbind("All",t(data.frame(all)))
t(data.frame(all))
dim(t(data.frame(all)))
head(rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)]))
names(combined_data)
combined_data$Var1[1:5]
cbind(combined_data$Var1,rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])))
cbind(combined_data$Var1,rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)]))
cbind("All",combined_data$Var1)
rbind("All",combined_data$Var1)
rbind(data.frame("All"),combined_data$Var1)
combined_data$Var1[1]
combined_data$Var1[0]="all"
data.frame("All")
rbind(data.frame("All"),combined_data$Var1)
rbind(data.frame("All"),data.frame(combined_data$Var1))
rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)]))
rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])))
rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])
all
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
combined_data=rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
dim(train)
dim(test)
names(train)
log_columns = c("tenure", "MultipleLines", "InternetService", "StreamingTV",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod",
"MonthlyCharges", "TotalCharges")
log_columns
head(train[,names%in%log_columns])
names%in%log_columns
names(train)%in%log_columns
head(train[,names(train)%in%log_columns])
table
churn_knn = function(train,test,k)  {
train.X = train[,-20]
test.X = test[,-20]
train.Y = train$Churn
test.Y = test$Churn
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=1)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=4)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=5)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=10)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=50)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=100)
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=2)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-20]
test.X = test[,-20]
train.Y = train$Churn
test.Y = test$Churn
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=1)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=4)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=5)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=10)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=50)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=100)
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=2)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-20]
test.X = test[,-20]
train.Y = train$Churn
test.Y = test$Churn
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=1)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=4)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=5)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=10)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=50)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=100)
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=2)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}churn_knn(train_log_col,test_log_col,2)
churn_knn(train_log_col,test_log_col,2)
dim(train)
ncol(train)
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-ncol(train)]
test.X = test[,-ncol(test)]
train.Y = train$Churn
test.Y = test$Churn
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=1)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=4)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=5)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=10)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=50)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=100)
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=2)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
churn_knn(train_log_col,test_log_col,2)
dim(train_log_col)
dim(test_log_col)
head(train_log_col)
log_columns = c("tenure", "MultipleLines", "InternetService", "StreamingTV",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod",
"MonthlyCharges", "TotalCharges","Churn")
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
churn_knn(train_log_col,test_log_col,2)
churn_knn(train_log_col,test_log_col,2)[2]
churn_knn(train_log_col,test_log_col,2)[3]
numeric(0)
numeric(30)
sens_k = numeric(50)
for (i in 1:50){
sens_k[i] = churn_knn(train_log_col,test_log_col,2)[3]
}
sens_k
for (i in 1:50){
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
}
sens_k
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-ncol(train)]
test.X = test[,-ncol(test)]
train.Y = train$Churn
test.Y = test$Churn
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=1)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=4)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=5)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=10)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=50)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=100)
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=k)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
for (i in 1:50){
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
}
sens_k
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-ncol(train)]
test.X = test[,-ncol(test)]
train.Y = train$Churn
test.Y = test$Churn
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=1)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=4)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=5)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=10)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=50)
#knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=100)
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=k)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
sens_k = numeric(50)
for (i in 1:50){
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
}
sens_k
sens_k = numeric(50)
for (i in 2:100){
sens_k[i/2] = churn_knn(train_log_col,test_log_col,i)[3]
}
sens_k
churn_knn(train_log_col,test_log_col,10)
sens_k = numeric(50)
acc_k = numeric(50)
for (i in 2:100){
sens_k[i/2] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i/2] = churn_knn(train_log_col,test_log_col,i)[1]
}
sens_k
acc_k
which.is.max(acc_k)
which.max(acc_k)
acc_k[16]
which.max(sens_k)
sens_[1]
sens_k[16]
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
which.max(sens_k)
which.max(acc_k)
acc_k[36]
plot(1:100,acc_k)
plot(1:100,acc_k)
plot(1:100,acc_k,type='l',xlab = 'k')
plot(1:100,1-acc_k,type='l',xlab = 'k')
sens_k
plot(1:100,1-acc_k,type='l',xlab = 'k',ylab = 'Test Error')
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors',ylab = 'Test Error')
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error')
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='b')
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
which.max(sens_k)
which.max(acc_k)
which.max(acc_k_allCols)
which.max(acc_k_allCols)
which.max(sens_k_allCols)
acc_k_allCols[29]
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
sens_k_allCols[1]
sens_k[1]
sens_k_allCols
legend("topright", c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright", c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1)
legend("right", c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1)
legend("topright",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1)
legend("topright",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("right",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("top",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 1, lty = 1,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 0.1, lty = 1,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 0.5, lty = 1,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",c("all predictors", "subset predictors"), col = c("blue", "red"),
cex = 0.5, lty = 1:2,box.lty=0)
legend("topright",c("All predictors", "Subset predictors"), col = c("blue", "red"),
cex = 0.8, lty = 1)
legend("topright",c("All predictors", "Subset predictors"), col = c("blue", "red"),
cex = 0.7, lty = 1)
legend("topright",c("All predictors", "Subset predictors"), col = c("blue", "red"),
cex = 0.6, lty = 1)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",c("All predictors", "Subset predictors"), col = c("blue", "red"),
cex = 0.6, lty = 1)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",c("All predictors", "Subset predictors"), col = c("blue", "red"),
cex = 0.6, lty = 1)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used")
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=6)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12)
legend("topright",legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("topright",legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend("top",legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
legend(1,95,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(1,95,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
legend(80,0.26,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
legend(60,0.26,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=12,box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(60,0.26,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",text.font=40,box.lty=0)
legend(60,0.28,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(60,0.27,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(60,0.275,legend=c("All", "From Logistic model"), col = c("blue", "red"),
cex = 0.6, lty = 1,title="Predictors used",box.lty=0)
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(60,0.275,legend=c("All", "From Logistic model"), col = c("red", "blue"),
cex = 0.6, lty = 1,title="Predictors used",box.lty=0)
which.max(sens_k)
which.max(acc_k)
sens_k[1]
acc_k[36]
1-acc_k[36]
mushrooms = read.csv(mushrooms.csv)
mushrooms = read.csv('mushrooms.csv')
mushrooms = read.csv('/home/ratanond/Desktop/IUPUI/INFO-H515/FinalExam/mushrooms.csv')
names(mushrooms)
mushrooms$class
log_columns = c("tenure", "InternetService", "StreamingTV",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod",
"Churn")
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(60,0.275,legend=c("All", "From Logistic model"), col = c("red", "blue"),
cex = 0.6, lty = 1,title="Predictors used",box.lty=0)
max(sens_k)
max(acc_k)
which.max(sens_k)
which.max(acc_k)
acc_k[21]
