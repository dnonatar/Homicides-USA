citation("metagenomeSeq")
citation("RSQLite")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
install.packages('httpuv')
install.packages("shiny")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
library(shiny)
devtools::session_info()
install.packages("devtools")
devtools::session_info()
library(shiny)
install.packages("shiny")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
library(shiny)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?plotOutput
source('~/.active-rstudio-document', echo=TRUE)
install.packages("plotly")
library(Plotly)
library(Plotly)
install.packages("plotly")
library(Plotly)
library(plotly)
library(plotly)
library(Plotly)
install.packages("plotly")
library(plotly)
install.packages("openssl")
install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
install.packages("crosstalk")
install.packages("httpuv")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("plotly")
library("shiny")
library("ployly")
library("plotly")
update.packages()
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
library("plotly")
library("shiny")
version
update.packages(ask=FALSE)
library(shiny)
install.packages("shiny")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
detach("package:httpuv", unload=TRUE)
library("httpuv", lib.loc="/usr/local/lib/R/site-library")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("plotly")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("sessioninfo")
library(httpuv)
library(shiny)
sessioninfo::session_info()
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages("devtools")
devtools::install_github("ropensci/plotly")
install.packages("crosstalk")
devtools::install_github("rstudio/crosstalk")
devtools::install_github("rstudio/crosstalk")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
remove.packages("httpuv", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
library("httpuv", lib.loc="/usr/local/lib/R/site-library")
detach("package:httpuv", unload=TRUE)
0.16/(1-0.16)
library(ISLR)
head(Smarket)
boxplot(Smarket)
boxplot(Smarket[2:])
boxplot(Lag1~Year,data=Smarket)
boxplot(Lag2~Year,data=Smarket)
summary(Smarket)
Summary(Weekly)
library(ISLR)
summary(Weekly)
boxplot(Volume~Year,data=Weekly)
plot(Volume,Year,data=Weekly)
plot(Weekly['Volume'],Weekly['Year'])
scat(Weekly$Volume,Weekly$Year)
plot(Weekly$Volume,Weekly$Year)
plot(Weekly$Year,Weekly$Volume)
cor(Weekly)
head(Weekly)
head(Weekly[,-9])
cor(Weekly[,-9])
boxplot(Volume~Direction,data=Weekly)
boxplot(Volume~Lag1,data=Weekly)
boxplot(Lag1~Direction,data=Weekly)
dim(Weekly)
predict(glm.fits,type="response")
glm.fits = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Weekly,family=binomial)
glm.probs=predict(glm.fits,type="response")
glm.probs
dim(Weekly[Year<2009,])
dim(Weekly[Weekly$Year<2009,])
lda(Direction~Lag2,data=Weekly_train)
as.matrix(Weekly$Lag2[Weekly$Year<2009])
dim(as.matrix(Weekly$Lag2[Weekly$Year<2009]))
dim(Weekly$Lag2[Weekly$Year<2009])
length(Weekly$Lag2[Weekly$Year<2009])
head(as.matrix(Weekly$Lag2[Weekly$Year<2009]))
head(Autp)
head(Auto)
dim(Auto)
Auto$year
pmax(1,2,3)
max(1,2,3)
library(ISLR)
head(Boston)
library(MASS)
head(Boston)
dim(Boston)
library(randomForest)
library(randomForest)
set.seed(1)
train = sample(1:nrow(Boston),nrow(Boston)/2)
X.train = Boston[train, -14]
X.test = Boston[-train, -14]
Y.train = Boston[train, 14]
Y.test = Boston[-train, 14]
p = dim(Boston)[2] - 1
p.2 = p/2
p.sq = sqrt(p)
rf.boston.1 = randomForest(X.train,Y.train,xtest=X.test,ytest = Y.test,mtry = p,ntree = 500)
dim(rf.boston.1$mse)
dim(rf.boston.1$test$mse)
rf.boston.1$test$mse
length(rf.boston.1$test$mse)
length(rf.boston.1$mse)
mean(rf.boston.1)
mean(rf.boston.1.test.mse)
mean(rf.boston.1$test$mse)
mean(rf.boston.1$mse)
head(Carseats)
install.packages('tree')
head(Caravan)
install.packages('gbm')
head(Boston)
head(Boston[-rad])
head(Boston[,-rad])
head(Boston[,-'rad'])
head(Boston[,-c('rad')])
head(Boston[,!(names(Boston)%in%'rad'))
head(Boston[,!(names(Boston)%in%'rad')]
)
train.X = Caravan.train[,!(names(Caravan.train)%in%'Purchase')]
dim(Caravan)
Caravan$Purchase <- ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- Caravan[train, ]
Caravan.test <- Caravan[-train, ]
```
train <- 1:1000
Caravan$Purchase <- ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- Caravan[train, ]
Caravan.test <- Caravan[-train, ]
train.X = Caravan.train[,!(names(Caravan.train)%in%'Purchase')]
test.X = Caravan.test[,!(names(Caravan.test)%in%'Purchase')]
train.Y = Caravan.train[,(names(Caravan.train)%in%'Purchase')]
test.Y = Caravan.train[,(names(Caravan.train)%in%'Purchase')]
dim(train.X)
dim(train.Y)
dim(train,Y)
dim(train.Y)
dim(Caravan.test)
dim(Caravan.train)
dim(Caravan.train$Purchase)
Caravan.train$Purchase
length(Caravan.train$Purchase)
length(train.Y)
length(test.Y)
knn.pred = knn(train.X,test.X,train.Y,k=1)
library(class)
knn.pred = knn(train.X,test.X,train.Y,k=1)
dim(knn.pred)
length(knn.pred)
log_columns = c("SeniorCitizen","Dependents", "tenure","MultipleLines", "InternetService","OnlineSecurity",
"StreamingTV", "TechSupport",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod",
"Churn")
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
log_columns
log_columns = c("SeniorCitizen","Dependents", "tenure","MultipleLines", "InternetService","OnlineSecurity",
"StreamingTV", "TechSupport",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "Churn")
train_log_col = train[,names(train)%in%log_columns]
dim(train)
train
train = read.csv('./data/telco_train.csv')
setwd('/home/ratanond/Desktop/IUPUI/INFO-H515/FinalProject')
train = read.csv('./data/telco_train.csv')
test = read.csv('./data/telco_test.csv')
train = within(train, SeniorCitizen <- factor(SeniorCitizen, labels = c(0, 1)))
train = within(train, Partner <- factor(Partner, labels = c(0, 1)))
train = within(train, Dependents <- factor(Dependents, labels = c(0, 1)))
train = within(train, PhoneService <- factor(PhoneService, labels = c(0, 1)))
train = within(train, MultipleLines <- factor(MultipleLines, labels = c(0, 1)))
train = within(train, OnlineSecurity <- factor(OnlineSecurity, labels = c(0, 1)))
train = within(train, OnlineBackup <- factor(OnlineBackup, labels = c(0, 1)))
train = within(train, DeviceProtection <- factor(DeviceProtection, labels = c(0, 1)))
train = within(train, TechSupport <- factor(TechSupport, labels = c(0, 1)))
train = within(train, StreamingTV <- factor(StreamingTV, labels = c(0, 1)))
train = within(train, StreamingMovies <- factor(StreamingMovies, labels = c(0, 1)))
train = within(train, PaperlessBilling <- factor(PaperlessBilling, labels = c(0, 1)))
train = within(train, Churn <- factor(Churn, labels = c(0, 1)))
train = within(train, InternetService <- factor(InternetService, labels = c(0,1,2)))
train = within(train, Contract <- factor(Contract, labels = c(0,1,2)))
train = within(train, PaymentMethod <- factor(PaymentMethod, labels = c(0,1,2,3)))
test = within(test, SeniorCitizen <- factor(SeniorCitizen, labels = c(0, 1)))
test = within(test, Partner <- factor(Partner, labels = c(0, 1)))
test = within(test, Dependents <- factor(Dependents, labels = c(0, 1)))
test = within(test, PhoneService <- factor(PhoneService, labels = c(0, 1)))
test = within(test, MultipleLines <- factor(MultipleLines, labels = c(0, 1)))
test = within(test, OnlineSecurity <- factor(OnlineSecurity, labels = c(0, 1)))
test = within(test, OnlineBackup <- factor(OnlineBackup, labels = c(0, 1)))
test = within(test, DeviceProtection <- factor(DeviceProtection, labels = c(0, 1)))
test = within(test, TechSupport <- factor(TechSupport, labels = c(0, 1)))
test = within(test, StreamingTV <- factor(StreamingTV, labels = c(0, 1)))
test = within(test, StreamingMovies <- factor(StreamingMovies, labels = c(0, 1)))
test = within(test, PaperlessBilling <- factor(PaperlessBilling, labels = c(0, 1)))
test = within(test, Churn <- factor(Churn, labels = c(0, 1)))
test = within(test, InternetService <- factor(InternetService, labels = c(0,1,2)))
test = within(test, Contract <- factor(Contract, labels = c(0,1,2)))
test = within(test, PaymentMethod <- factor(PaymentMethod, labels = c(0,1,2,3)))
log_columns = c("SeniorCitizen","Dependents", "tenure","MultipleLines", "InternetService","OnlineSecurity",
"StreamingTV", "TechSupport",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "Churn")
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-ncol(train)]
test.X = test[,-ncol(test)]
train.Y = train$Churn
test.Y = test$Churn
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=k)
##table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
library(class)
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
churn_knn = function(train,test,k)  {
set.seed(123)
train.X = train[,-ncol(train)]
test.X = test[,-ncol(test)]
train.Y = train$Churn
test.Y = test$Churn
knn.pred = knn(data.matrix(train.X),data.matrix(test.X),train.Y,k=k)
table = table(test.Y,knn.pred)
accuracy = mean(knn.pred==test.Y)
error = mean(knn.pred!=test.Y)
specificity = 1 - (table[1,2])/(table[1,1]+table[1,2])
sensitivity = table[2,2]/(table[2,1]+table[2,2])
results = c(accuracy,error,sensitivity,specificity)
return(results)
}
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
sens_k[which.max(sens_k)]
acc_k[which.max(acc_k)]
plot(1:100,1-acc_k,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='blue')
lines(1:100,1-acc_k_allCols,type='l',xlab = 'Number of Neighbors (k)',ylab = 'Test Error',col='red')
legend(60,0.275,legend=c("All", "From Logistic model"), col = c("red", "blue"),
cex = 0.6, lty = 1,title="Predictors used",box.lty=0)
which.max(acc_k)
which.max(sens_k)
sens_k
sens_k[1]
acc_k[1]
sens_k[50]
sens_k[36]
acc_k[36]
acc_k
sens_k
sens_k[50]
acc_k[50]
acc_k[25]
sens_k[25]
1-acc_k[25]
log_columns = c("SeniorCitizen","Dependents", "tenure", "InternetService","OnlineSecurity",
"StreamingTV", "TechSupport",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "Churn")
log_columns = c("SeniorCitizen","Dependents", "tenure", "InternetService","OnlineSecurity",
"StreamingTV", "TechSupport",
"StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "Churn")
train_log_col = train[,names(train)%in%log_columns]
test_log_col = test[,names(test)%in%log_columns]
sens_k_allCols = numeric(100)
acc_k_allCols = numeric(100)
sens_k = numeric(100)
acc_k = numeric(100)
for (i in 1:100){
sens_k_allCols[i] = churn_knn(train,test,i)[3]
acc_k_allCols[i] = churn_knn(train,test,i)[1]
sens_k[i] = churn_knn(train_log_col,test_log_col,i)[3]
acc_k[i] = churn_knn(train_log_col,test_log_col,i)[1]
}
sens_k[which.max(sens_k)]
acc_k[which.max(acc_k)]
sens_k
which.max(sens_k)
acc_k[2]
acc_k[25]
sens_k[25]
sens_k[21]
acc_k[21]
acc_k[22]
sens_k[22]
acc_k
sens_k
acc_k[28]
sens_k[28]
1-acc_k[28]
et.seed(1234)
mushrooms = read.csv('/home/ratanond/Desktop/IUPUI/INFO-H515/FinalExam/mushrooms.csv')
smp_size = floor(0.5*nrow(mushrooms))
train_ind = sample(seq_len(nrow(mushrooms)),size = smp_size)
train = mushrooms[train_ind,]
test = mushrooms[-train_ind,]
set.seed(1234)
library(randomForest)
rf.mushrooms.10 = randomForest(class~.,data=train,mtry=m2,ntree=10,importance=TRUE)
mushrooms_pred.10 <- predict(rf.mushrooms.10, newdata = test)
mean(test$class!=mushrooms_pred.30)
rf.mushrooms.10 = randomForest(class~.,data=train,mtry=m2,ntree=10,importance=TRUE)
mushrooms_pred.10 <- predict(rf.mushrooms.10, newdata = test)
mean(test$class!=mushrooms_pred.10)
p = dim(train)[2] - 1
m1 = p/2
m2 = sqrt(p)
rf.mushrooms.10 = randomForest(class~.,data=train,mtry=m2,ntree=10,importance=TRUE)
mushrooms_pred.10 <- predict(rf.mushrooms.10, newdata = test)
mean(test$class!=mushrooms_pred.10)
rf.mushrooms.10 = randomForest(class~.,data=train,mtry=m1,ntree=10,importance=TRUE)
mushrooms_pred.10 <- predict(rf.mushrooms.10, newdata = test)
mean(test$class!=mushrooms_pred.10)
rf.mushrooms.10 = randomForest(class~.,data=train,mtry=m1,ntree=1,importance=TRUE)
mushrooms_pred.10 <- predict(rf.mushrooms.10, newdata = test)
mean(test$class!=mushrooms_pred.10)
rf.mushrooms.10 = randomForest(class~.,data=train,mtry=m1,ntree=10,importance=TRUE)
mushrooms_pred.10 <- predict(rf.mushrooms.10, newdata = test)
mean(test$class!=mushrooms_pred.10)
rf.mushrooms.5 = randomForest(class~.,data=train,mtry=m2,ntree=5,importance=TRUE)
mushrooms_pred.5 <- predict(rf.mushrooms.5, newdata = test)
mean(test$class!=mushrooms_pred.5)
importance(rf.mushrooms.5)
varImpPlot(rf.mushrooms.5)
rf.mushrooms.5 = randomForest(class~.,data=train,mtry=m2,ntree=5,importance=TRUE)
mushrooms_pred.5 <- predict(rf.mushrooms.5, newdata = test)
mean(test$class!=mushrooms_pred.5)
importance(rf.mushrooms.5)
varImpPlot(rf.mushrooms.5)
setwd('/home/ratanond/Desktop/IUPUI/INFO-H517/Project2/Main/data')
years = c(1977,1987,1997,2007,2017)
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
combined_data=rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
library(reshape)
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$VicSex=='Male',]
shr_vic_female = shr[shr$VicSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
combined_data=rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
cir_by_month$Var1
dim(shr)
hom_weapon = data.frame(table(shr$Weapon,shr$Homicide))
hom_weapon = cast(hom_weapon,Var1~Var2)
colnames(hom_weapon) = c("weapon","negligence","murder")
hom_weapon["neg_per"] = (hom_weapon$negligence)/(hom_weapon$negligence+hom_weapon$murder)*100
hom_weapon["murder_per"] = (hom_weapon$murder)/(hom_weapon$negligence+hom_weapon$murder)*100
write.csv(hom_weapon,"hom_weapon.csv",row.names = FALSE)
round(2.34536,3)
hom_weapon = data.frame(table(shr$Weapon,shr$Homicide))
hom_weapon = cast(hom_weapon,Var1~Var2)
colnames(hom_weapon) = c("weapon","negligence","murder")
hom_weapon["neg_per"] = round((hom_weapon$negligence)/(hom_weapon$negligence+hom_weapon$murder)*100,2)
hom_weapon["murder_per"] = round((hom_weapon$murder)/(hom_weapon$negligence+hom_weapon$murder)*100,2)
write.csv(hom_weapon,"hom_weapon.csv",row.names = FALSE)
shr_1977 = read.csv('SHR_1977.csv',sep="")
setwd('/home/ratanond/Desktop/IUPUI/INFO-H517/Project2/Main/data')
shr_1977 = read.csv('SHR_1977.csv',sep="")
shr_1977 = read.csv('SHR_1977.csv',sep="")
shr_1987 = read.csv('SHR_1987.csv',sep="")
paste("SHR_",1977,'.csv',sep="")
shr_1977 = read.csv(paste("SHR_",1977,'.csv',sep=""))
table(shr_1977$Circumstance)
dim(table(shr_1977$Circumstance))
table(shr_1977$Circumstance,shr_1977$Month)
shr_1997 = read.csv('SHR_1997.csv',sep="")
shr_1997 = read.csv('SHR_1997.csv')
table(shr_1997$Circumstance,shr_1997$Month)
for (year in years){
datafile = paste("SHR_",year,'.csv',sep="")
shr = read.csv(datafile)
shr_vic_male = shr[shr$OffSex=='Male',]
shr_vic_female = shr[shr$OffSex=='Female',]
cir_by_month = data.frame(table(shr$Circumstance,shr$Month))
cir_by_month = cast(cir_by_month,Var1~Var2)
cir_by_month_M = data.frame(table(shr_vic_male$Circumstance,shr_vic_male$Month))
cir_by_month_M = cast(cir_by_month_M,Var1~Var2)
cir_by_month_F = data.frame(table(shr_vic_female$Circumstance,shr_vic_female$Month))
cir_by_month_F = cast(cir_by_month_F,Var1~Var2)
combined_data = cbind(cir_by_month, cir_by_month_M,cir_by_month_F)
all = apply(combined_data[,c(-1,-14,-27)],2,sum)
combined_data=rbind(t(data.frame(all)),combined_data[,c(-1,-14,-27)])
write.csv(combined_data,paste("cir_by_month_MF_",year,".csv",sep=""),row.names = FALSE)
}
shr$Situation
table(shr$Circumstance,shr$Weapon)
