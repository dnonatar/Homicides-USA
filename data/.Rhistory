cor_g<-numeric(dim(gaussian)[2])
cor_rna<-numeric(dim(rnaseq)[2])
for (n in 1:100){
new_microb <- microb
m <- lm(y~gaussian[,1:n],subset = y[,1]>0&y[,2]>0)
new_microb[,1:2] <- predict(m, newdata=as.data.frame(gaussian))
cor_g[n] <- myCCA(new_microb, gaussian)
cor_rna[n] <- myCCA(new_microb,rnaseq)
}
gaussian <- gaussian[1:gaussian_rows,1:100]
cor_g<-numeric(dim(gaussian)[2])
cor_rna<-numeric(dim(rnaseq)[2])
for (n in 1:100){
new_microb <- microb
m <- lm(y~gaussian[,1:n],subset = y[,1]>0&y[,2]>0)
new_microb[,1:2] <- predict(m, newdata=as.data.frame(gaussian))
cor_g[n] <- myCCA(new_microb, gaussian)
cor_rna[n] <- myCCA(new_microb,rnaseq)
}
plot(cor_g[1:40])
plot(cor_rna[1:40])
plot(cor_rna)
dim(rnaseq)
dim(rnaseq)
rnaseq = read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Eunji/rnaseq_cls/rnaseq_cls/out/myparams_trn.txt",sep = ",")
rnaseq = as.matrix(rnaseq)
rnaseq_rows = dim(rnaseq)[1]/2
rnaseq = rnaseq[1:rnaseq_rows,1:600]
dim(rnaseq)
gaussian <- gaussian[1:gaussian_rows,1:600]
gaussian <- read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Eunji/rnaseq_cls/rnaseq_cls/out/myparams_ma_trn.txt",sep = ",")
gaussian <- as.matrix(gaussian)
gaussian_rows <- dim(gaussian)[1]/2
gaussian <- gaussian[1:gaussian_rows,1:600]
dim(gaussian)
cor_g<-numeric(dim(gaussian)[2])
cor_rna<-numeric(dim(rnaseq)[2])
for (n in 1:600){
new_microb <- microb
m <- lm(y~gaussian[,1:n],subset = y[,1]>0&y[,2]>0)
new_microb[,1:2] <- predict(m, newdata=as.data.frame(gaussian))
cor_g[n] <- myCCA(new_microb, gaussian)
cor_rna[n] <- myCCA(new_microb,rnaseq)
}
plot(cor_rna)
plot(cor_rna[1:40])
myCCA(microb,rnaseq)
mean(cor_rna)
plot(cor_g[1:40])
myCCA(microb,rnaseq)
myCCA(microb,gaussian)
dim(gaussian)
dim(y)
dim(microb)
max(cor_g)
max(cor_rna)
mean(cor_g)
mean(cor_rna)
myCCA(microb,gaussian)
myCCA(microb,rnaseq)
dim(microb)
y <- microb[,1:3]
cor_g<-numeric(dim(gaussian)[2])
cor_rna<-numeric(dim(rnaseq)[2])
for (n in 1:600){
new_microb <- microb
m <- lm(y~gaussian[,1:n],subset = y[,1]>0&y[,2]&y[,3]>0)
new_microb[,1:3] <- predict(m, newdata=as.data.frame(gaussian))
cor_g[n] <- myCCA(new_microb, gaussian)
cor_rna[n] <- myCCA(new_microb,rnaseq)
}
plot(cor_g)
plot(cor_rna)
plot(cor_g[1:40])
plot(cor_rna[1:40])
myCCA()
myCCA(microb,gaussian)
dim(microb)
max(cor_g)
max(cor_rna)
mean(cor_g)
mean(cor_rna)
microb = read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Arghavan/MetaSample2/samples.txt")
microb = as.matrix(microb)
microb <- microb[,-1]
microb_rows = dim(microb)[1]/2   # divide by two to choose only the first class
microb = microb[1:microb_rows,]
sd <- apply(microb,2,sd)
microb <- microb[,which(sd!=0)]  # choose only OTUs with non-zero standard deviation
microb <- microb[,c(417,541,42)] # two OTUs with min numbers of zeros
gaussian <- read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Eunji/rnaseq_cls/rnaseq_cls/out/myparams_ma_trn.txt",sep = ",")
gaussian <- as.matrix(gaussian)
gaussian_rows <- dim(gaussian)[1]/2
gaussian <- gaussian[1:gaussian_rows,1:100]
rnaseq = read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Eunji/rnaseq_cls/rnaseq_cls/out/myparams_trn.txt",sep = ",")
rnaseq = as.matrix(rnaseq)
rnaseq_rows = dim(rnaseq)[1]/2
rnaseq = rnaseq[1:rnaseq_rows,1:100]
y <- microb[,1:3]
cor_g<-numeric(dim(gaussian)[2])
cor_rna<-numeric(dim(rnaseq)[2])
for (n in 1:100){
new_microb <- microb
m <- lm(y~gaussian[,1:n],subset = y[,1]>0&y[,2]&y[,3]>0)
new_microb[,1:3] <- predict(m, newdata=as.data.frame(gaussian))
cor_g[n] <- myCCA(new_microb, gaussian)
cor_rna[n] <- myCCA(new_microb,rnaseq)
}
plot(cor_g)
dim(cor_g)
length(cor_g)
dim(gaussian)
dim(rnaseq)
plot(cor_g[1:40])
plot(cor_rna[1:40])
myCCA(microb,gaussian)
myCCA(microb,rnaseq)
max(cor_g)
mean(cor_g)
mean(cor_rna)
mean(cor_rna)
meax(cor_rna)
max(cor_rna)
microb = read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Arghavan/MetaSample2/samples.txt")
microb = as.matrix(microb)
microb <- microb[,-1]
microb_rows = dim(microb)[1]/2   # divide by two to choose only the first class
microb = microb[1:microb_rows,]
sd <- apply(microb,2,sd)
microb <- microb[,which(sd!=0)]  # choose only OTUs with non-zero standard deviation
microb <- microb[,c(417,541,42)] # two OTUs with min numbers of zeros
gaussian <- read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Eunji/rnaseq_cls/rnaseq_cls/out/myparams_ma_trn.txt",sep = ",")
gaussian <- as.matrix(gaussian)
gaussian_rows <- dim(gaussian)[1]/2
gaussian <- gaussian[1:gaussian_rows,1:100]
rnaseq = read.table("/home/ratanond/Desktop/Masters_Project/Synthetic/Eunji/rnaseq_cls/rnaseq_cls/out/myparams_trn.txt",sep = ",")
rnaseq = as.matrix(rnaseq)
rnaseq_rows = dim(rnaseq)[1]/2
rnaseq = rnaseq[1:rnaseq_rows,1:100]
y <- microb[,1]
cor_g<-numeric(dim(gaussian)[2])
cor_rna<-numeric(dim(rnaseq)[2])
for (n in 1:100){
new_microb <- microb
m <- lm(y~gaussian[,1:n],subset = y>0)
new_microb[,1] <- predict(m, newdata=as.data.frame(gaussian))
cor_g[n] <- myCCA(new_microb, gaussian)
cor_rna[n] <- myCCA(new_microb,rnaseq)
}
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Tool/ccaresults",paste("azx","Scores1.pdf", sep="")),bg="transparent")
myCCAPlot(U1, U2, V1, xyName = "Seedlevel2", coloName = "Immunology")
myCCAPlot(V1, V2, U1, xyName = "Immunology", coloName = "Seedlevel2")
dev.off()
library(ggplot2)
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Tool/ccaresults",paste("azx","Scores1.pdf", sep="")),bg="transparent")
myCCAPlot(U1, U2, V1, xyName = "Seedlevel2", coloName = "Immunology")
myCCAPlot(V1, V2, U1, xyName = "Immunology", coloName = "Seedlevel2")
dev.off()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Tool/ccaresults",paste("azx","Scores1.pdf", sep="")),bg="transparent")
myCCAPlot(U1, U2, V1, xyName = "Seedlevel2", coloName = "Immunology")
myCCAPlot(V1, V2, U1, xyName = "Immunology", coloName = "Seedlevel2")
dev.off()
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaImmunScores,
xyName = "Seedlevel2", coloName = "Immunology",
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
"SeedLevel2")) +
scale_y_continuous(paste0("Second Component Scores of ",
"SeedLevel2")) +
labs(title = paste0("First Canonical Variate Pair")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Feeding Type",
labels = c("Breastfeeding", "Formula Feeding")) +
scale_shape_discrete(name = "Feeding Type",
labels = c("Breastfeeding", "Formula Feeding"))
myPlot1
}
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaImmunScores,
xyName = "Seedlevel2", coloName = "Immunology",
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
"SeedLevel2")) +
scale_y_continuous(paste0("First Component Scores of ",
"Immunology")) +
labs(title = paste0("First Canonical Variate Pair")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Feeding Type",
labels = c("Breastfeeding", "Formula Feeding")) +
scale_shape_discrete(name = "Feeding Type",
labels = c("Breastfeeding", "Formula Feeding"))
myPlot1
}
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Tool/ccaresults",paste("azx","Scores2.pdf", sep="")),bg="transparent")
myCCAPlot(U1, V1, U1, xyName = "Immunology", coloName = "Seedlevel2")
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaImmunScores,
xyName = "Seedlevel2", coloName = "Immunology",
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("Second Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("Second Component Scores of ",
"SeedLevel2")) +
scale_y_continuous(paste0("Second Component Scores of ",
"Immunology")) +
labs(title = paste0("Second Canonical Variate Pair")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Feeding Type",
labels = c("Breastfeeding", "Formula Feeding")) +
scale_shape_discrete(name = "Feeding Type",
labels = c("Breastfeeding", "Formula Feeding"))
myPlot1
}
myCCAPlot(U2, V2, U2, xyName = "Immunology", coloName = "Seedlevel2")
dev.off()
source('~/Desktop/Masters_Project/CCA/Lab_Experiment/CCA_anlys.R', echo=TRUE)
citation(package = PMA)
citation(package = 'PMA')
citation(package = 'gplot2')
citation(package = 'ggplot2')
citation("metagenomeSeq")
citation("RSQLite")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
install.packages('httpuv')
install.packages("shiny")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
library(shiny)
devtools::session_info()
install.packages("devtools")
devtools::session_info()
library(shiny)
install.packages("shiny")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
library(shiny)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?plotOutput
source('~/.active-rstudio-document', echo=TRUE)
install.packages("plotly")
library(Plotly)
library(Plotly)
install.packages("plotly")
library(Plotly)
library(plotly)
library(plotly)
library(Plotly)
install.packages("plotly")
library(plotly)
install.packages("openssl")
install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
install.packages("crosstalk")
install.packages("httpuv")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("plotly")
library("shiny")
library("ployly")
library("plotly")
update.packages()
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
install.packages(c("ade4", "backports", "BH", "bit", "car", "caret", "checkmate", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "ff", "foreach", "Formula", "futile.options", "gdata", "ggbeeswarm", "glmnet", "gridExtra", "haplo.stats", "highr", "Hmisc", "htmlTable", "igraph", "irlba", "iterators", "jsonlite", "kimisc", "knitr", "lambda.r", "later", "lazyeval", "lme4", "matrixStats", "multcomp", "munsell", "mvtnorm", "NLP", "NMF", "pkgmaker", "plogr", "PMA", "pryr", "quanteda", "quantreg", "R6", "randomForest", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "registry", "reshape2", "rmarkdown", "rms", "rngtools", "rprojroot", "RSpectra", "RSQLite", "sandwich", "scales", "segmented", "seqinr", "stringi", "stringr", "survival", "tibble", "tidyr", "tm", "VennDiagram", "viridis", "viridisLite", "XML", "yaml", "zoo"))
library("plotly")
library("shiny")
version
update.packages(ask=FALSE)
library(shiny)
install.packages("shiny")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("shiny")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
detach("package:httpuv", unload=TRUE)
library("httpuv", lib.loc="/usr/local/lib/R/site-library")
library("httpuv", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("plotly")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
install.packages("plotly")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("sessioninfo")
library(httpuv)
library(shiny)
sessioninfo::session_info()
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages("devtools")
devtools::install_github("ropensci/plotly")
install.packages("crosstalk")
devtools::install_github("rstudio/crosstalk")
devtools::install_github("rstudio/crosstalk")
library("shiny", lib.loc="/usr/local/lib/R/site-library")
remove.packages("httpuv", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
remove.packages("httpuv", lib="/usr/local/lib/R/site-library")
library("httpuv", lib.loc="/usr/local/lib/R/site-library")
detach("package:httpuv", unload=TRUE)
0.16/(1-0.16)
library(ISLR)
head(Smarket)
boxplot(Smarket)
boxplot(Smarket[2:])
boxplot(Lag1~Year,data=Smarket)
boxplot(Lag2~Year,data=Smarket)
summary(Smarket)
Summary(Weekly)
library(ISLR)
summary(Weekly)
boxplot(Volume~Year,data=Weekly)
plot(Volume,Year,data=Weekly)
plot(Weekly['Volume'],Weekly['Year'])
scat(Weekly$Volume,Weekly$Year)
plot(Weekly$Volume,Weekly$Year)
plot(Weekly$Year,Weekly$Volume)
cor(Weekly)
head(Weekly)
head(Weekly[,-9])
cor(Weekly[,-9])
boxplot(Volume~Direction,data=Weekly)
boxplot(Volume~Lag1,data=Weekly)
boxplot(Lag1~Direction,data=Weekly)
dim(Weekly)
predict(glm.fits,type="response")
glm.fits = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Weekly,family=binomial)
glm.probs=predict(glm.fits,type="response")
glm.probs
dim(Weekly[Year<2009,])
dim(Weekly[Weekly$Year<2009,])
lda(Direction~Lag2,data=Weekly_train)
as.matrix(Weekly$Lag2[Weekly$Year<2009])
dim(as.matrix(Weekly$Lag2[Weekly$Year<2009]))
dim(Weekly$Lag2[Weekly$Year<2009])
length(Weekly$Lag2[Weekly$Year<2009])
head(as.matrix(Weekly$Lag2[Weekly$Year<2009]))
head(Autp)
head(Auto)
dim(Auto)
Auto$year
pmax(1,2,3)
max(1,2,3)
library(ISLR)
head(Boston)
library(MASS)
head(Boston)
dim(Boston)
library(randomForest)
library(randomForest)
set.seed(1)
train = sample(1:nrow(Boston),nrow(Boston)/2)
X.train = Boston[train, -14]
X.test = Boston[-train, -14]
Y.train = Boston[train, 14]
Y.test = Boston[-train, 14]
p = dim(Boston)[2] - 1
p.2 = p/2
p.sq = sqrt(p)
rf.boston.1 = randomForest(X.train,Y.train,xtest=X.test,ytest = Y.test,mtry = p,ntree = 500)
dim(rf.boston.1$mse)
dim(rf.boston.1$test$mse)
rf.boston.1$test$mse
length(rf.boston.1$test$mse)
length(rf.boston.1$mse)
mean(rf.boston.1)
mean(rf.boston.1.test.mse)
mean(rf.boston.1$test$mse)
mean(rf.boston.1$mse)
head(Carseats)
install.packages('tree')
head(Caravan)
install.packages('gbm')
head(Boston)
head(Boston[-rad])
head(Boston[,-rad])
head(Boston[,-'rad'])
head(Boston[,-c('rad')])
head(Boston[,!(names(Boston)%in%'rad'))
head(Boston[,!(names(Boston)%in%'rad')]
)
train.X = Caravan.train[,!(names(Caravan.train)%in%'Purchase')]
dim(Caravan)
Caravan$Purchase <- ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- Caravan[train, ]
Caravan.test <- Caravan[-train, ]
```
train <- 1:1000
Caravan$Purchase <- ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- Caravan[train, ]
Caravan.test <- Caravan[-train, ]
train.X = Caravan.train[,!(names(Caravan.train)%in%'Purchase')]
test.X = Caravan.test[,!(names(Caravan.test)%in%'Purchase')]
train.Y = Caravan.train[,(names(Caravan.train)%in%'Purchase')]
test.Y = Caravan.train[,(names(Caravan.train)%in%'Purchase')]
dim(train.X)
dim(train.Y)
dim(train,Y)
dim(train.Y)
dim(Caravan.test)
dim(Caravan.train)
dim(Caravan.train$Purchase)
Caravan.train$Purchase
length(Caravan.train$Purchase)
length(train.Y)
length(test.Y)
knn.pred = knn(train.X,test.X,train.Y,k=1)
library(class)
knn.pred = knn(train.X,test.X,train.Y,k=1)
dim(knn.pred)
length(knn.pred)
setwd('/home/ratanond/Desktop/IUPUI/INFO-H517/Project2/Main/data')
library(reshape)
shr = read.csv('SHR_2017.csv')
attach(shr)
table(VicEthnic)
table(OffSex)
table(OffEthnic)
names(shr)
